import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Load the MNC stock market data (replace 'your_data.csv' with the actual filename)
data = pd.read_csv('/mnc_stock.csv')

# Data preprocessing
# Assuming 'Date', 'Close', 'Volume', 'MarketCap', 'PE_Ratio' are relevant features
# You might need to adjust this based on your dataset
features = ['Close', 'Volume', 'MarketCap', 'PE_Ratio']
target = 'Close'

# Handling missing values if any
data.dropna(inplace=True)

# Splitting data into features and target variable
X = data[features]
y = data[target]

# Splitting data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model training
model = LinearRegression()
model.fit(X_train, y_train)

# Model evaluation
train_preds = model.predict(X_train)
test_preds = model.predict(X_test)

train_rmse = np.sqrt(mean_squared_error(y_train, train_preds))
test_rmse = np.sqrt(mean_squared_error(y_test, test_preds))

print(f'Train RMSE: {train_rmse}')
print(f'Test RMSE: {test_rmse}')

# Visualizing predictions
plt.figure(figsize=(10, 6))
plt.scatter(y_test, test_preds)
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs Predicted Stock Prices')
plt.show()
